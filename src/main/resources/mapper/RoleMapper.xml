<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="roleMapper">

	<cache type="org.mybatis.caches.oscache.OSCache"/>
	
	<sql id="base_column">
		id, roleId,roleName,createTime,updateTime,version
	</sql>

	<insert id="add" parameterType="role">
		<selectKey resultType="java.lang.Integer" order="AFTER"
			keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into role (roleId,roleName,createTime,updateTime,version)
		values (#{roleId},#{roleName},#{createTime},#{updateTime},#{version})
	</insert>
	<insert id="addRolePrivilege" parameterType="rolePrivilege">
		insert into role_privilege (roleId,privilegeId)
		values (#{roleId},#{privilegeId})
	</insert>

	<delete id="deleteRolePrivilegeById" parameterType="int">
		delete from role_privilege where roleId
		= #{id}
	</delete>
	
	<delete id="deleteRolePrivilegeByIds" parameterType="java.util.List">
		delete from role_privilege where roleId in 
		<foreach collection="list" index="index" item="id" open="("
			separator="," close=")">
			#{id}
		</foreach>
	</delete>
	
	<select id="getPrivilegeByRoleId"  resultType="privilege" parameterType="int">
		select 
		*
		from privilege
		<where>
			id in (select rp.privilegeId from role_privilege as rp where rp.roleId= #{id})
		</where> 
	</select>
	
	<delete id="deleteById" parameterType="int">
		delete from role where id
		= #{id}
	</delete>

	<delete id="deleteByIds" parameterType="java.util.List">
		delete from role where id in
		<foreach collection="list" index="index" item="id" open="("
			separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<!-- 增加乐观锁 version -->
	<update id="update" parameterType="role" >
		update role
		<set>
			roleName=#{roleName},
			updateTime = #{updateTime},
			version = #{version}+1
		</set>
		where id = #{id} and version = #{version}
	</update>

	<select id="getById" parameterType="int" resultType="role" useCache="false">
		select
		<include refid="base_column" />
		from role where id = #{id}
	</select>
	
	<select id="getByLoginUser"  resultType="role" parameterType="user">
		select 
		<include refid="base_column" />
		from role
		<where>
			id in(select ur.roleId from user_role as ur where ur.userId=#{id})
		</where>
	</select>
	
	<select id="getUserRoleByRoleId"  resultType="userRole" parameterType="role" useCache="false">
		select 
		*
		from user_role
		<where>
			roleId = #{id}
		</where>
	</select>
	
	<select id="getList" parameterType="role" resultType="role" useCache="false">
		select
		<include refid="base_column" />
		from role 
		<where>
			<if test="roleId != null and roleId != ''">
				and roleId like concat('%',#{roleId},'%')
			</if>
			<if test="roleName != null and roleName != ''">
				and roleName like concat('%',#{roleName},'%')
			</if>
		</where>
		order by updatetime desc;
	</select>
	
	<select id="getCount" parameterType="role" resultType="long" useCache="false">
		select count(*) from role 
		<where>
			<if test="roleId != null and roleId != ''">
				and roleId like concat('%',#{roleId},'%')
			</if>
			<if test="roleName != null and roleName != ''">
				and roleName like concat('%',#{roleName},'%')
			</if>
		</where>
	</select>

</mapper>